//
// Created by Jake J. Harmon (jake.harmon@ieee.org) on 3/31/22.
//

#ifndef DROMON_QUADRATURECOLLECTION_H
#define DROMON_QUADRATURECOLLECTION_H

#include "config.h"
#include <map>

DROMON_NAMESPACE_OPEN

namespace Quadrature
{
class GaussQuadrature
{
public:
  const unsigned int N;
  const unsigned int maxN = 30;
  std::vector<double> weights;
  std::vector<double> abscissa;

  GaussQuadrature() : N(0) {}
  GaussQuadrature(const unsigned int Nin) : N(Nin)
  {
    assert(Nin > 1 && Nin <= maxN);
    switch (Nin)
    {
    case 2:
      weights = {1.0000000000000000, 1.0000000000000000,};
      abscissa = {-0.5773502691896257, 0.5773502691896257};
      break;
    case 3:
      weights = {0.5555555555555556, 0.8888888888888888,0.5555555555555556};
      abscissa = {0,-0.7745966692414834, 0.0000000000000000, 0.7745966692414834};
      break;
    case 4:
      weights = {0.6521451548625461,
                 0.6521451548625461,
                 0.3478548451374538,
                 0.3478548451374538};
      abscissa = {-0.3399810435848563,
                  0.3399810435848563,
                  -0.8611363115940526,
                  0.8611363115940526};
      break;
    case 5:
      weights = {0.5688888888888889,
                 0.4786286704993665,
                 0.4786286704993665,
                 0.2369268850561891,
                 0.2369268850561891};
      abscissa = {0.0000000000000000,
                  -0.5384693101056831,
                  0.5384693101056831,
                  -0.9061798459386640,
                  0.9061798459386640};
      break;
    case 6:
      weights = {0.3607615730481386,
                 0.3607615730481386,
                 0.4679139345726910,
                 0.4679139345726910,
                 0.1713244923791704,
                 0.1713244923791704};
      abscissa = {0.6612093864662645,
                  -0.6612093864662645,
                  -0.2386191860831969,
                  0.2386191860831969,
                  -0.9324695142031521,
                  0.9324695142031521};
      break;
    case 7:
      weights = {0.4179591836734694,
                 0.3818300505051189,
                 0.3818300505051189,
                 0.2797053914892766,
                 0.2797053914892766,
                 0.1294849661688697,
                 0.1294849661688697};
      abscissa = {0.0000000000000000,
                  0.4058451513773972,
                  -0.4058451513773972,
                  -0.7415311855993945,
                  0.7415311855993945,
                  -0.9491079123427585,
                  0.9491079123427585};
      break;
    case 8:
      weights = {0.3626837833783620,
                 0.3626837833783620,
                 0.3137066458778873,
                 0.3137066458778873,
                 0.2223810344533745,
                 0.2223810344533745,
                 0.1012285362903763,
                 0.1012285362903763};
      abscissa = {-0.1834346424956498,
                  0.1834346424956498,
                  -0.5255324099163290,
                  0.5255324099163290,
                  -0.7966664774136267,
                  0.7966664774136267,
                  -0.9602898564975363,
                  0.9602898564975363};
      break;
    case 9:
      weights = {0.3302393550012598,
                 0.1806481606948574,
                 0.1806481606948574,
                 0.0812743883615744,
                 0.0812743883615744,
                 0.3123470770400029,
                 0.3123470770400029,
                 0.2606106964029354,
                 0.2606106964029354};
      abscissa = {0.0000000000000000,
                  -0.8360311073266358,
                  0.8360311073266358,
                  -0.9681602395076261,
                  0.9681602395076261,
                  -0.3242534234038089,
                  0.3242534234038089,
                  -0.6133714327005904,
                  0.6133714327005904};
      break;
    case 10:
//      weights = {0.2955242247147529,
//                 0.2955242247147529,
//                 0.2692667193099963,
//                 0.2692667193099963,
//                 0.2190863625159820,
//                 0.2190863625159820,
//                 0.1494513491505806,
//                 0.1494513491505806,
//                 0.0666713443086881,
//                 0.0666713443086881};
//      abscissa = {-0.1488743389816312,
//                  0.1488743389816312,
//                  -0.4333953941292472,
//                  0.4333953941292472,
//                  -0.6794095682990244,
//                  0.6794095682990244,
//                  -0.8650633666889845,
//                  0.8650633666889845,
//                  -0.9739065285171717,
//                  0.9739065285171717};
        weights = {0.066671344308688137593568809893,
        0.14945134915058059314577633966,
         0.21908636251598204399553493423,
         0.26926671930999635509122692157,
         0.29552422471475287017389299465,
         0.29552422471475287017389299465,
         0.26926671930999635509122692157,
         0.21908636251598204399553493423,
         0.14945134915058059314577633966,
         0.066671344308688137593568809893,};
        abscissa = {-0.973906528517171720077964012,
         -0.865063366688984510732096688,
         -0.679409568299024406234327365,
         -0.433395394129247190799265943,
         -0.148874338981631210884826001,
         0.148874338981631210884826001,
         0.433395394129247190799265943,
        0.679409568299024406234327365,
         0.865063366688984510732096688,
         0.973906528517171720077964012,};
      break;
    case 11:
      weights = {0.2729250867779006,
                 0.2628045445102467,
                 0.2628045445102467,
                 0.2331937645919905,
                 0.2331937645919905,
                 0.1862902109277343,
                 0.1862902109277343,
                 0.1255803694649046,
                 0.1255803694649046,
                 0.0556685671161737,
                 0.0556685671161737};
      abscissa = {0.0000000000000000,
                  -0.2695431559523450,
                  0.2695431559523450,
                  -0.5190961292068118,
                  0.5190961292068118,
                  -0.7301520055740494,
                  0.7301520055740494,
                  -0.8870625997680953,
                  0.8870625997680953,
                  -0.9782286581460570,
                  0.9782286581460570};
      break;
    case 12:
      weights = {0.2491470458134028,
                 0.2491470458134028,
                 0.2334925365383548,
                 0.2334925365383548,
                 0.2031674267230659,
                 0.2031674267230659,
                 0.1600783285433462,
                 0.1600783285433462,
                 0.1069393259953184,
                 0.1069393259953184,
                 0.0471753363865118,
                 0.0471753363865118};
      abscissa = {-0.1252334085114689,
                  0.1252334085114689,
                  -0.3678314989981802,
                  0.3678314989981802,
                  -0.5873179542866175,
                  0.5873179542866175,
                  -0.7699026741943047,
                  0.7699026741943047,
                  -0.9041172563704749,
                  0.9041172563704749,
                  -0.9815606342467192,
                  0.9815606342467192};
      break;
    case 13:
      weights = {0.2325515532308739,
                 0.2262831802628972,
                 0.2262831802628972,
                 0.2078160475368885,
                 0.2078160475368885,
                 0.1781459807619457,
                 0.1781459807619457,
                 0.1388735102197872,
                 0.1388735102197872,
                 0.0921214998377285,
                 0.0921214998377285,
                 0.0404840047653159,
                 0.0404840047653159};
      abscissa = {0.0000000000000000,
                  -0.2304583159551348,
                  0.2304583159551348,
                  -0.4484927510364469,
                  0.4484927510364469,
                  -0.6423493394403402,
                  0.6423493394403402,
                  -0.8015780907333099,
                  0.8015780907333099,
                  -0.9175983992229779,
                  0.9175983992229779,
                  -0.9841830547185881,
                  0.9841830547185881};
      break;
    case 14:
      weights = {0.035119460331751863031832876138,
      0.08015808715976020980563327706,
       0.12151857068790318468941480907,
       0.15720316715819353456960193862,
       0.18553839747793781374171659013,
       0.20519846372129560396592406566,
       0.21526385346315779019587644332,
       0.21526385346315779019587644332,
       0.20519846372129560396592406566,
       0.18553839747793781374171659013,
       0.15720316715819353456960193862,
       0.12151857068790318468941480907,
       0.08015808715976020980563327706,
       0.035119460331751863031832876138};

      abscissa = { -0.986283808696812338841597267,
      -0.928434883663573517336391139,
       -0.827201315069764993189794743,
       -0.687292904811685470148019803,
       -0.515248636358154091965290719,
       -0.319112368927889760435671824,
       -0.108054948707343662066244650,
       0.108054948707343662066244650,
       0.31911236892788976043567182,
       0.51524863635815409196529072,
       0.68729290481168547014801980,
       0.82720131506976499318979474,
       0.92843488366357351733639114,
       0.98628380869681233884159727,};
      break;
    case 15:
      weights = {0.2025782419255613,
                 0.1984314853271116,
                 0.1984314853271116,
                 0.1861610000155622,
                 0.1861610000155622,
                 0.1662692058169939,
                 0.1662692058169939,
                 0.1395706779261543,
                 0.1395706779261543,
                 0.1071592204671719,
                 0.1071592204671719,
                 0.0703660474881081,
                 0.0703660474881081,
                 0.0307532419961173,
                 0.0307532419961173};
      abscissa = {0.0000000000000000,
                  -0.2011940939974345,
                  0.2011940939974345,
                  -0.3941513470775634,
                  0.3941513470775634,
                  -0.5709721726085388,
                  0.5709721726085388,
                  -0.7244177313601701,
                  0.7244177313601701,
                  -0.8482065834104272,
                  0.8482065834104272,
                  -0.9372733924007060,
                  0.9372733924007060,
                  -0.9879925180204854,
                  0.9879925180204854};
      break;
    case 16:
      weights = {0.1894506104550685,
                 0.1894506104550685,
                 0.1826034150449236,
                 0.1826034150449236,
                 0.1691565193950025,
                 0.1691565193950025,
                 0.1495959888165767,
                 0.1495959888165767,
                 0.1246289712555339,
                 0.1246289712555339,
                 0.0951585116824928,
                 0.0951585116824928,
                 0.0622535239386479,
                 0.0622535239386479,
                 0.0271524594117541,
                 0.0271524594117541};
      abscissa = {-0.0950125098376374,
                  0.0950125098376374,
                  -0.2816035507792589,
                  0.2816035507792589,
                  -0.4580167776572274,
                  0.4580167776572274,
                  -0.6178762444026438,
                  0.6178762444026438,
                  -0.7554044083550030,
                  0.7554044083550030,
                  -0.8656312023878318,
                  0.8656312023878318,
                  -0.9445750230732326,
                  0.9445750230732326,
                  -0.9894009349916499,
                  0.9894009349916499};
      break;
    case 17:
      weights = {0.1794464703562065,
                 0.1765627053669926,
                 0.1765627053669926,
                 0.1680041021564500,
                 0.1680041021564500,
                 0.1540457610768103,
                 0.1540457610768103,
                 0.1351363684685255,
                 0.1351363684685255,
                 0.1118838471934040,
                 0.1118838471934040,
                 0.0850361483171792,
                 0.0850361483171792,
                 0.0554595293739872,
                 0.0554595293739872,
                 0.0241483028685479,
                 0.0241483028685479};
      abscissa = {0.0000000000000000,
                  -0.1784841814958479,
                  0.1784841814958479,
                  -0.3512317634538763,
                  0.3512317634538763,
                  -0.5126905370864769,
                  0.5126905370864769,
                  -0.6576711592166907,
                  0.6576711592166907,
                  -0.7815140038968014,
                  0.7815140038968014,
                  -0.8802391537269859,
                  0.8802391537269859,
                  -0.9506755217687678,
                  0.9506755217687678,
                  -0.9905754753144174,
                  0.9905754753144174};
      break;
    case 18:
      weights = {0.1691423829631436,
                 0.1691423829631436,
                 0.1642764837458327,
                 0.1642764837458327,
                 0.1546846751262652,
                 0.1546846751262652,
                 0.1406429146706507,
                 0.1406429146706507,
                 0.1225552067114785,
                 0.1225552067114785,
                 0.1009420441062872,
                 0.1009420441062872,
                 0.0764257302548891,
                 0.0764257302548891,
                 0.0497145488949698,
                 0.0497145488949698,
                 0.0216160135264833,
                 0.0216160135264833};
      abscissa = {-0.0847750130417353,
                  0.0847750130417353,
                  -0.2518862256915055,
                  0.2518862256915055,
                  -0.4117511614628426,
                  0.4117511614628426,
                  -0.5597708310739475,
                  0.5597708310739475,
                  -0.6916870430603532,
                  0.6916870430603532,
                  -0.8037049589725231,
                  0.8037049589725231,
                  -0.8926024664975557,
                  0.8926024664975557,
                  -0.9558239495713977,
                  0.9558239495713977,
                  -0.9915651684209309,
                  0.9915651684209309};
      break;
    case 19:
      weights = {0.1610544498487837,
                 0.1589688433939543,
                 0.1589688433939543,
                 0.1527660420658597,
                 0.1527660420658597,
                 0.1426067021736066,
                 0.1426067021736066,
                 0.1287539625393362,
                 0.1287539625393362,
                 0.1115666455473340,
                 0.1115666455473340,
                 0.0914900216224500,
                 0.0914900216224500,
                 0.0690445427376412,
                 0.0690445427376412,
                 0.0448142267656996,
                 0.0448142267656996,
                 0.0194617882297265,
                 0.0194617882297265};
      abscissa = {0.0000000000000000,
                  -0.1603586456402254,
                  0.1603586456402254,
                  -0.3165640999636298,
                  0.3165640999636298,
                  -0.4645707413759609,
                  0.4645707413759609,
                  -0.6005453046616810,
                  0.6005453046616810,
                  -0.7209661773352294,
                  0.7209661773352294,
                  -0.8227146565371428,
                  0.8227146565371428,
                  -0.9031559036148179,
                  0.9031559036148179,
                  -0.9602081521348300,
                  0.9602081521348300,
                  -0.9924068438435844,
                  0.9924068438435844};
      break;
    case 20:
      weights = {0.0176140071391521,
                 0.0406014298003869,
                 0.0626720483341091,
                 0.0832767415767048,
                 0.101930119817240,
                 0.118194531961518,
                 0.131688638449177,
                 0.142096109318382,
                 0.149172986472604,
                 0.152753387130726,
                 0.152753387130726,
                 0.149172986472604,
                 0.142096109318382,
                 0.131688638449177,
                 0.118194531961518,
                 0.101930119817240,
                 0.0832767415767048,
                 0.0626720483341091,
                 0.0406014298003869,
                 0.0176140071391521};
      abscissa = {-0.993128599185095,
                  -0.963971927277914,
                  -0.912234428251326,
                  -0.839116971822219,
                  -0.746331906460151,
                  -0.636053680726515,
                  -0.510867001950827,
                  -0.373706088715420,
                  -0.227785851141645,
                  -0.0765265211334973,
                  0.0765265211334973,
                  0.227785851141645,
                  0.373706088715420,
                  0.510867001950827,
                  0.636053680726515,
                  0.746331906460151,
                  0.839116971822219,
                  0.912234428251326,
                  0.963971927277914,
                  0.993128599185095};
      break;
    case 30:
abscissa.resize(N);
weights.resize(N);
abscissa[0] = -0.99689348407464954027163005;
abscissa[1] = -0.98366812327974720997003258;
abscissa[2] = -0.96002186496830751221687103;
abscissa[3] = -0.92620004742927432587932428;
abscissa[4] = -0.88256053579205268154311646;
abscissa[5] = -0.82956576238276839744289812;
abscissa[6] = -0.76777743210482619491797734;
abscissa[7] = -0.69785049479331579693229239;
abscissa[8] = -0.62052618298924286114047756;
abscissa[9] = -0.53662414814201989926416979;
abscissa[10] = -0.44703376953808917678060990;
abscissa[11] = -0.35270472553087811347103721;
abscissa[12] = -0.25463692616788984643980513;
abscissa[13] = -0.15386991360858354696379467;
abscissa[14] = -0.05147184255531769583302521;
abscissa[15] = 0.05147184255531769583302521;
abscissa[16] = 0.15386991360858354696379467;
abscissa[17] = 0.25463692616788984643980513;
abscissa[18] = 0.35270472553087811347103721;
abscissa[19] = 0.44703376953808917678060990;
abscissa[20] = 0.53662414814201989926416979;
abscissa[21] = 0.62052618298924286114047756;
abscissa[22] = 0.69785049479331579693229239;
abscissa[23] = 0.76777743210482619491797734;
abscissa[24] = 0.82956576238276839744289812;
abscissa[25] = 0.88256053579205268154311646;
abscissa[26] = 0.92620004742927432587932428;
abscissa[27] = 0.96002186496830751221687103;
abscissa[28] = 0.98366812327974720997003258;
abscissa[29] = 0.99689348407464954027163005;

weights[0] = 0.007968192496166605615465883475;
weights[1] = 0.018466468311090959142302131912;
weights[2] = 0.028784707883323369349719179611;
weights[3] = 0.038799192569627049596801936446;
weights[4] = 0.048402672830594052902938140423;
weights[5] = 0.057493156217619066481721689402;
weights[6] = 0.06597422988218049512812851512;
weights[7] = 0.07375597473770520626824385002;
weights[8] = 0.08075589522942021535469493846;
weights[9] = 0.08689978720108297980238753072;
weights[10] = 0.09212252223778612871763270709;
weights[11] = 0.09636873717464425963946862635;
weights[12] = 0.09959342058679526706278028210;
weights[13] = 0.10176238974840550459642895217;
weights[14] = 0.10285265289355884034128563671;
weights[15] = 0.10285265289355884034128563671;
weights[16] = 0.10176238974840550459642895217;
weights[17] = 0.09959342058679526706278028210;
weights[18] = 0.09636873717464425963946862635;
weights[19] = 0.09212252223778612871763270709;
weights[20] = 0.08689978720108297980238753072;
weights[21] = 0.08075589522942021535469493846;
weights[22] = 0.07375597473770520626824385002;
weights[23] = 0.06597422988218049512812851512;
weights[24] = 0.057493156217619066481721689402;
weights[25] = 0.048402672830594052902938140423;
weights[26] = 0.038799192569627049596801936446;
weights[27] = 0.028784707883323369349719179611;
weights[28] = 0.018466468311090959142302131912;
weights[29] = 0.007968192496166605615465883475;
      break;
    default:
    #ifdef DEBUG
      assert(false && "Quadrature order not implemented!");
    #endif

    #ifndef DEBUG
      std::cout << "Quadrature rule of order " << std::to_string(Nin) <<  " is invalid. Aborting." << std::endl;
      std::abort();
    #endif
      break;
    }

  }
};


template <class QuadratureType>
class QuadratureCollection
{
private:
  std::map<unsigned int, QuadratureType> qcollection;
public:
  void push_back(const unsigned int& ngl);
  void get_weights_and_points(const unsigned int& ngl, std::vector<double>& wgl, std::vector<double>& xgl);
  void get_weights_and_points(const unsigned int& ngl, std::vector<double>*& wgl, std::vector<double>*& xgl);
};
template <class QuadratureType>
void QuadratureCollection<QuadratureType>::get_weights_and_points(const unsigned int& ngl,
                                                  std::vector<double> &wgl,
                                                  std::vector<double> &xgl)
{
  wgl = qcollection[ngl].weights;
  xgl = qcollection[ngl].abscissa;
}
template <class QuadratureType>
void QuadratureCollection<QuadratureType>::get_weights_and_points(const unsigned int& ngl,
                                                  std::vector<double> *&wgl,
                                                  std::vector<double> *&xgl)
{
//  if (qcollection.find(ngl) == qcollection.end())
//    this->push_back(ngl);

  wgl = &qcollection[ngl].weights;
  xgl = &qcollection[ngl].abscissa;
}
template <class QuadratureType>
void QuadratureCollection<QuadratureType>::push_back(const unsigned int &ngl)
{
  //add to the qcollection map (if necessary)
  if (qcollection.find(ngl) == qcollection.end())
  {
    //Need to add a new quadrature rule
    qcollection.insert(std::make_pair(ngl, QuadratureType(ngl)));
 }
}

}
DROMON_NAMESPACE_CLOSE
#endif // DROMON_QUADRATURECOLLECTION_H
